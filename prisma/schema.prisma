generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phoneNumber   String?  
  roles         String[] @default(["user"])
  permissions   String[] @default(["create_appointment"])
  isSuspended   Boolean  @default(false)
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  testimonials  Testimonial[]
  barberProfile Barber?
}

model Barber {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialties   String[]
  appointments  Appointment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float    
  duration    Int      
  isActive    Boolean  @default(true)
  appointments AppointmentService[]
}

model Appointment {
  id            String    @id @default(cuid())
  userId        String
  barberId      String
  date          DateTime
  status        AppointmentStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  extraInfo     String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  barber        Barber    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  testimonial   Testimonial?
  services      AppointmentService[]
}

model AppointmentService {
  id            String    @id @default(cuid())
  appointmentId String
  serviceId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, serviceId])
}

model Testimonial {
  id            String    @id @default(cuid())
  rating        Int
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointmentId String    @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  PAID
  COMPLETED
}